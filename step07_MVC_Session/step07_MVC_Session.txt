[ 학  습  ]
1. Cookie
	- Client에 저장
	- 시간 설정(삭제시 잔여 시간 0변경)
2. Session 
	- 서버의 메모리에 저장
	- HttpSession(삭제시 invalidate)

[ 쿠키 실습  ]
	- index.jsp에서 쿠키 생성 -> controller에서 쿠키 획득 후 확인
		-> 컨트롤러에서 cookieView.jsp로 쿠키를 재전달하고 cookieView에서 쿠키 획득 및 재확인을 진행
[해설]
	- index.jsp 에서 컨트롤러.java를 거쳐 cookieView.jsp로 가기 위해서는
	- 컨트롤러.java가 서블릿이 되기 위해서 servlet-context.xml파일을 수정해야 한다. 
	- <context:component-scan base-package="com.spring.controller" />  이것을 추가해야됨
	- index.jsp에서 쿠키 생성시 jsp안에 내장객체가 있으므로 바로 생성 가능하고 java언어를 쓰기위해 <% %> 태그를 사용한다.
	- 그 안에 적어준다 Cookie cookie1 = new Cookie("id","test");
			      cookie1.setMaxAge(60*60);
			      response.addCookie(cookie1);  
	- 컨트롤러 안에서 쿠키를 받기 위해서 매개변수를 바로 받을 수 있다 .
			public String cookieTest(@CookieValue("id") String idValue) {System.out.println("Cookie : "+idValue);}


[ 세션 실습  ]
	- index.jsp에서 세션 생성 -> 컨트롤러에서 세션 획득 및 확인 및 새로운 데이터를 세션에 추가 
		-> sessionView1.jsp로 이동하여 세션 획득,확인,활용,삭제 -> 다시 컨트롤러로 넘어가서 모든 세션 삭제
		-> 마지막으로 sessionView2.jsp로 이동한다.
[해설]
	- 먼저 index.jsp에서 세션을 생성을하고 그다음 컨트롤러에서 index.jsp에서 만든 세션을 획득한다
	- 그리고 컨트롤러에서 session.setAttribute 활용해 세션에 데이터를 추가한다.
		[job삭제]
	- 컨트롤러에서 job데이터를 세션에서 삭제하기 위한 몇가지 조건이 있다. 먼저 전체 클래스에 @SessionAttributes("job") 이 어노테이션을 추가해야한다.
	- 그리고 delete함수의 매개변수로  @ModelAttribute("job") 어노테이션을 매개변수에 적어 주고 데이터를 받고, 세션의 상태를 관리하는
	- SessionStatus 객체를 매개변수로 전달 받는다. 그리고 이 변수를 활용해 status.setComplete(); 함수를 함으로 세션을 삭제할 수 있다.
		
	















